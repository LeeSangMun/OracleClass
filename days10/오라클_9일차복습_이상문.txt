1.  truncate / delete / drop 대해서 설명하세요

	truncate - 행 삭제 + 자동 커밋
	delete - 행 삭제 + COMMIT, ROLLBACK 까지 해야함
	drop - 테이블을 삭제

2.  insert 문 수행 중 다음과 같은 오류가 발생했다면 이유에 대해 설명하세요
  ㄱ. 00947. 00000 -  "not enough values"
  ㄴ. ORA-00001: unique constraint (SCOTT.SYS_C007770) violated  
  ㄷ. ORA-02291: integrity constraint (SCOTT.FK_DEPTNO) violated - parent key not found

	ㄱ - insert 할 때 VALUES에 컬럼 갯수와 저장할 컬럼 갯수가 달라서 발생
	ㄴ - Primary Key에 같은 값을 넣었을 때 발생
	ㄷ - 

   
3. 서브쿼리를 사용해서 테이블 생성
  ㄱ. deptno, dname, empno, ename, sal+nvl(comm,0) pay, grade 컬럼을 가진 새로운 테이블 생성
  ㄴ. 테이블명 : tbl_empdeptgrade   

	CREATE TABLE tbl_empdeptgrade
	AS (
    		SELECT d.deptno, dname, empno, ename, sal+NVL(comm, 0) pay, grade
    		FROM emp e JOIN dept d ON e.deptno=d.deptno
              		     JOIN salgrade s ON sal BETWEEN s.losal AND s.hisal
	);


4-1. insa 테이블에서 num, name 가져와서 tbl_score 테이블 생성
     (tbl_score 테이블이 있으면 삭제 후 시작하세요 )

	DROP TABLE tbl_score;
	CREATE TABLE tbl_score
	AS (
    		SELECT num, name
    		FROM insa
	);

4-2. kor, eng, mat, tot          , avg , grade, rank 컬럼 추가

	ALTER TABLE tbl_score
	ADD (
    		kor NUMBER(3) DEFAULT 0
    		, eng NUMBER(3) DEFAULT 0
    		, mat NUMBER(3) DEFAULT 0
    		, tot NUMBER(3) 
    		, avg NUMBER(5, 2)
    		, grade NCHAR(3)
    		, rank NUMBER(3)
	);


4-3. 각 학생들의 kor,eng,mat 점수 0~100 랜덤하게 채워넣기.

	UPDATE tbl_score
	SET kor = TRUNC(dbms_random.value(0, 101))
   		, eng = TRUNC(dbms_random.value(0, 101))
    		, mat = TRUNC(dbms_random.value(0, 101))


4-4. 총점, 평균, 등급, 등수 수정
    조건)
     등급은 모든 과목이 40점이상이고, 평균 60 이상이면 "합격"
           평균 60 이상이라도 한 과목이라 40점 미만이라면  "과락"
           그외는 "불합격" 이라고 저장.

	UPDATE tbl_score t
	SET tot = kor+eng+mat
    		, avg = (kor+eng+mat)/3
    		, grade = CASE
                			WHEN (kor+eng+mat)/3 >= 60 AND LEAST(kor, eng, mat) >= 40 THEN '합격'
                			WHEN (kor+eng+mat)/3 >= 60 AND LEAST(kor, eng, mat) <= 40 THEN '과락'
                			ELSE '불합격'
             		END
    		, rank = (SELECT COUNT(*) FROM tbl_score WHERE tot > t.tot);



             
5.  emp 테이블의 구조를 확인하고, 제약조건을 확인하고, 임의의 사원 정보를 추가하는 INSERT 문을 작성하세요.
   ㄱ. 구조확인 쿼리 

	DESC emp;

   ㄴ. 제약조건 확인 쿼리



   ㄷ. INSERT 쿼리




6-1. emp 테이블의 구조만 복사해서 새로운 tbl_emp10, tbl_emp20, tbl_emp30, tbl_emp40 테이블을 생성하세요. 

CREATE TABLE tbl_emp10
AS (
    SELECT *
    FROM emp
    WHERE 1 = 0
);
CREATE TABLE tbl_emp20
AS (
    SELECT *
    FROM emp
    WHERE 1 = 0
);
CREATE TABLE tbl_emp30
AS (
    SELECT *
    FROM emp
    WHERE 1 = 0
);
CREATE TABLE tbl_emp40
AS (
    SELECT *
    FROM emp
    WHERE 1 = 0
);

6-2. emp 테이블의 각 부서에 해당하는 사원정보를  위에서 생성한 테이블에 INSERT 하는 쿼리를 작성하세요.   

INSERT ALL
WHEN deptno=10 THEN
INTO tbl_emp10
WHEN deptno=20 THEN
INTO tbl_emp20
WHEN deptno=30 THEN
INTO tbl_emp30
WHEN deptno=40 THEN
INTO tbl_emp40
SELECT *
FROM emp;


7. 조건이 있는 다중 INSERT 문에서  INSERT ALL 과 INSERT FIRST 문에 대한 차이점을 설명하세요.

	INSERT ALL	- 조건에 맞는 행을 모두 포함시킨다.
	INSERT FIRST	- 행이 앞조건에서 만족하면 뒤 조건에서는 재외된다.


8. 병합(merge) 문제
 1) 테이블생성
CREATE TABLE tbl_merge1
(
     id number primary key
   , name varchar2(20)
   , pay number
   , sudang number             
);
    
CREATE TABLE tbl_merge2
(
   id number primary key 
   , sudang number             
);
  2) 데이타 추가  
INSERT INTO tbl_merge1 (id, name, pay, sudang) VALUES (1, 'a', 100, 10);
INSERT INTO tbl_merge1 (id, name, pay, sudang) VALUES (2, 'b', 150, 20);
INSERT INTO tbl_merge1 (id, name, pay, sudang) VALUES (3, 'c', 130, 0);
    
INSERT INTO tbl_merge2 (id, sudang) VALUES (2,5);
INSERT INTO tbl_merge2 (id, sudang) VALUES (3,10);
INSERT INTO tbl_merge2 (id, sudang) VALUES (4,20);

COMMIT;
 
  3) tbl_merge1을 tbl_merge2에 병합 ( id, sudang )하세요... 

	??
